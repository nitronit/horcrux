// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.13.0
// source: strangelove/proto/cosigner.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cosigner_SetNoncesAndSign_FullMethodName = "/strangelove.proto.Cosigner/SetNoncesAndSign"
	Cosigner_GetNonces_FullMethodName        = "/strangelove.proto.Cosigner/GetNonces"
	Cosigner_Ping_FullMethodName             = "/strangelove.proto.Cosigner/Ping"
)

// CosignerClient is the client API for Cosigner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CosignerClient interface {
	SetNoncesAndSign(ctx context.Context, in *SetNoncesAndSignRequest, opts ...grpc.CallOption) (*SetNoncesAndSignResponse, error)
	GetNonces(ctx context.Context, in *GetNoncesRequest, opts ...grpc.CallOption) (*GetNoncesResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type cosignerClient struct {
	cc grpc.ClientConnInterface
}

func NewCosignerClient(cc grpc.ClientConnInterface) CosignerClient {
	return &cosignerClient{cc}
}

func (c *cosignerClient) SetNoncesAndSign(ctx context.Context, in *SetNoncesAndSignRequest, opts ...grpc.CallOption) (*SetNoncesAndSignResponse, error) {
	out := new(SetNoncesAndSignResponse)
	err := c.cc.Invoke(ctx, Cosigner_SetNoncesAndSign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosignerClient) GetNonces(ctx context.Context, in *GetNoncesRequest, opts ...grpc.CallOption) (*GetNoncesResponse, error) {
	out := new(GetNoncesResponse)
	err := c.cc.Invoke(ctx, Cosigner_GetNonces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosignerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, Cosigner_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CosignerServer is the server API for Cosigner service.
// All implementations must embed UnimplementedCosignerServer
// for forward compatibility
type CosignerServer interface {
	SetNoncesAndSign(context.Context, *SetNoncesAndSignRequest) (*SetNoncesAndSignResponse, error)
	GetNonces(context.Context, *GetNoncesRequest) (*GetNoncesResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedCosignerServer()
}

// UnimplementedCosignerServer must be embedded to have forward compatible implementations.
type UnimplementedCosignerServer struct {
}

func (UnimplementedCosignerServer) SetNoncesAndSign(context.Context, *SetNoncesAndSignRequest) (*SetNoncesAndSignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNoncesAndSign not implemented")
}
func (UnimplementedCosignerServer) GetNonces(context.Context, *GetNoncesRequest) (*GetNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNonces not implemented")
}
func (UnimplementedCosignerServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedCosignerServer) mustEmbedUnimplementedCosignerServer() {}

// UnsafeCosignerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CosignerServer will
// result in compilation errors.
type UnsafeCosignerServer interface {
	mustEmbedUnimplementedCosignerServer()
}

func RegisterCosignerServer(s grpc.ServiceRegistrar, srv CosignerServer) {
	s.RegisterService(&Cosigner_ServiceDesc, srv)
}

func _Cosigner_SetNoncesAndSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNoncesAndSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosignerServer).SetNoncesAndSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cosigner_SetNoncesAndSign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosignerServer).SetNoncesAndSign(ctx, req.(*SetNoncesAndSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cosigner_GetNonces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosignerServer).GetNonces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cosigner_GetNonces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosignerServer).GetNonces(ctx, req.(*GetNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cosigner_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosignerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cosigner_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosignerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cosigner_ServiceDesc is the grpc.ServiceDesc for Cosigner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cosigner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strangelove.proto.Cosigner",
	HandlerType: (*CosignerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetNoncesAndSign",
			Handler:    _Cosigner_SetNoncesAndSign_Handler,
		},
		{
			MethodName: "GetNonces",
			Handler:    _Cosigner_GetNonces_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Cosigner_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strangelove/proto/cosigner.proto",
}
