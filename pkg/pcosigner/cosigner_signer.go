package pcosigner

// IThresholdSigner is interface for the cosigner_signer whether it's a soft sign or HSM
// Mainly for FUTURE use if and when we want to support HSM
type IThresholdSigner interface {
	// GetPubKey returns the persistent public key
	GetPubKey() []byte

	// GenerateNonces deals nonces for all cosigners.
	GenerateNonces() (Nonces, error)

	// Sign signs a byte payload using the a list of nonces.
	// Sign returns the partial signature and an error if any.
	Sign(nonces []Nonce, payload []byte) ([]byte, error)

	// CombineSignatures combines multiple partial signatures to a full signature.
	// FIX: not necessary this need to be in a Thresholdsigner?
	CombineSignatures([]PartialSignature) ([]byte, error)
}

// Nonces contains the ephemeral information generated by one cosigner for all other cosigners.
type Nonces struct {
	// PubKey is the public key for the generated nounces by cosigner
	PubKey []byte

	// Shares is the list nonces of size n generated by the cosigner.
	// Shares[i] is the nonce for cosigner i.
	Shares [][]byte
}

// Nonce is the ephemeral information from another cosigner destined for this cosigner.
type Nonce struct {
	ID     int
	Share  []byte
	PubKey []byte
}

// PartialSignature contains the partial signature and identifier (shamir id) of the signer.
type PartialSignature struct {
	ID        int
	Signature []byte
}
