// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.1
// source: grpc_server.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GRPC_SignBlock_FullMethodName                      = "/proto.GRPC/SignBlock"
	GRPC_SetEphemeralSecretPartsAndSign_FullMethodName = "/proto.GRPC/SetEphemeralSecretPartsAndSign"
	GRPC_GetEphemeralSecretParts_FullMethodName        = "/proto.GRPC/GetEphemeralSecretParts"
	GRPC_TransferLeadership_FullMethodName             = "/proto.GRPC/TransferLeadership"
	GRPC_GetLeader_FullMethodName                      = "/proto.GRPC/GetLeader"
)

// GRPCClient is the client API for GRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCClient interface {
	SignBlock(ctx context.Context, in *GRPCSignBlockRequest, opts ...grpc.CallOption) (*GRPCSignBlockResponse, error)
	SetEphemeralSecretPartsAndSign(ctx context.Context, in *GRPCSetEphemeralSecretPartsAndSignRequest, opts ...grpc.CallOption) (*GRPCSetEphemeralSecretPartsAndSignResponse, error)
	GetEphemeralSecretParts(ctx context.Context, in *GRPCGetEphemeralSecretPartsRequest, opts ...grpc.CallOption) (*GRPCGetEphemeralSecretPartsResponse, error)
	TransferLeadership(ctx context.Context, in *GRPCTransferLeadershipRequest, opts ...grpc.CallOption) (*GRPCTransferLeadershipResponse, error)
	GetLeader(ctx context.Context, in *GRPCGetLeaderRequest, opts ...grpc.CallOption) (*GRPCGetLeaderResponse, error)
}

type gRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCClient(cc grpc.ClientConnInterface) GRPCClient {
	return &gRPCClient{cc}
}

func (c *gRPCClient) SignBlock(ctx context.Context, in *GRPCSignBlockRequest, opts ...grpc.CallOption) (*GRPCSignBlockResponse, error) {
	out := new(GRPCSignBlockResponse)
	err := c.cc.Invoke(ctx, GRPC_SignBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCClient) SetEphemeralSecretPartsAndSign(ctx context.Context, in *GRPCSetEphemeralSecretPartsAndSignRequest, opts ...grpc.CallOption) (*GRPCSetEphemeralSecretPartsAndSignResponse, error) {
	out := new(GRPCSetEphemeralSecretPartsAndSignResponse)
	err := c.cc.Invoke(ctx, GRPC_SetEphemeralSecretPartsAndSign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCClient) GetEphemeralSecretParts(ctx context.Context, in *GRPCGetEphemeralSecretPartsRequest, opts ...grpc.CallOption) (*GRPCGetEphemeralSecretPartsResponse, error) {
	out := new(GRPCGetEphemeralSecretPartsResponse)
	err := c.cc.Invoke(ctx, GRPC_GetEphemeralSecretParts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCClient) TransferLeadership(ctx context.Context, in *GRPCTransferLeadershipRequest, opts ...grpc.CallOption) (*GRPCTransferLeadershipResponse, error) {
	out := new(GRPCTransferLeadershipResponse)
	err := c.cc.Invoke(ctx, GRPC_TransferLeadership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCClient) GetLeader(ctx context.Context, in *GRPCGetLeaderRequest, opts ...grpc.CallOption) (*GRPCGetLeaderResponse, error) {
	out := new(GRPCGetLeaderResponse)
	err := c.cc.Invoke(ctx, GRPC_GetLeader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCServer is the server API for GRPC service.
// All implementations must embed UnimplementedGRPCServer
// for forward compatibility
type GRPCServer interface {
	SignBlock(context.Context, *GRPCSignBlockRequest) (*GRPCSignBlockResponse, error)
	SetEphemeralSecretPartsAndSign(context.Context, *GRPCSetEphemeralSecretPartsAndSignRequest) (*GRPCSetEphemeralSecretPartsAndSignResponse, error)
	GetEphemeralSecretParts(context.Context, *GRPCGetEphemeralSecretPartsRequest) (*GRPCGetEphemeralSecretPartsResponse, error)
	TransferLeadership(context.Context, *GRPCTransferLeadershipRequest) (*GRPCTransferLeadershipResponse, error)
	GetLeader(context.Context, *GRPCGetLeaderRequest) (*GRPCGetLeaderResponse, error)
	mustEmbedUnimplementedGRPCServer()
}

// UnimplementedGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCServer struct {
}

func (UnimplementedGRPCServer) SignBlock(context.Context, *GRPCSignBlockRequest) (*GRPCSignBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignBlock not implemented")
}
func (UnimplementedGRPCServer) SetEphemeralSecretPartsAndSign(context.Context, *GRPCSetEphemeralSecretPartsAndSignRequest) (*GRPCSetEphemeralSecretPartsAndSignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEphemeralSecretPartsAndSign not implemented")
}
func (UnimplementedGRPCServer) GetEphemeralSecretParts(context.Context, *GRPCGetEphemeralSecretPartsRequest) (*GRPCGetEphemeralSecretPartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEphemeralSecretParts not implemented")
}
func (UnimplementedGRPCServer) TransferLeadership(context.Context, *GRPCTransferLeadershipRequest) (*GRPCTransferLeadershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferLeadership not implemented")
}
func (UnimplementedGRPCServer) GetLeader(context.Context, *GRPCGetLeaderRequest) (*GRPCGetLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeader not implemented")
}
func (UnimplementedGRPCServer) mustEmbedUnimplementedGRPCServer() {}

// UnsafeGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCServer will
// result in compilation errors.
type UnsafeGRPCServer interface {
	mustEmbedUnimplementedGRPCServer()
}

func RegisterGRPCServer(s grpc.ServiceRegistrar, srv GRPCServer) {
	s.RegisterService(&GRPC_ServiceDesc, srv)
}

func _GRPC_SignBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GRPCSignBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServer).SignBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPC_SignBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServer).SignBlock(ctx, req.(*GRPCSignBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPC_SetEphemeralSecretPartsAndSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GRPCSetEphemeralSecretPartsAndSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServer).SetEphemeralSecretPartsAndSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPC_SetEphemeralSecretPartsAndSign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServer).SetEphemeralSecretPartsAndSign(ctx, req.(*GRPCSetEphemeralSecretPartsAndSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPC_GetEphemeralSecretParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GRPCGetEphemeralSecretPartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServer).GetEphemeralSecretParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPC_GetEphemeralSecretParts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServer).GetEphemeralSecretParts(ctx, req.(*GRPCGetEphemeralSecretPartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPC_TransferLeadership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GRPCTransferLeadershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServer).TransferLeadership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPC_TransferLeadership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServer).TransferLeadership(ctx, req.(*GRPCTransferLeadershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPC_GetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GRPCGetLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServer).GetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPC_GetLeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServer).GetLeader(ctx, req.(*GRPCGetLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPC_ServiceDesc is the grpc.ServiceDesc for GRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GRPC",
	HandlerType: (*GRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignBlock",
			Handler:    _GRPC_SignBlock_Handler,
		},
		{
			MethodName: "SetEphemeralSecretPartsAndSign",
			Handler:    _GRPC_SetEphemeralSecretPartsAndSign_Handler,
		},
		{
			MethodName: "GetEphemeralSecretParts",
			Handler:    _GRPC_GetEphemeralSecretParts_Handler,
		},
		{
			MethodName: "TransferLeadership",
			Handler:    _GRPC_TransferLeadership_Handler,
		},
		{
			MethodName: "GetLeader",
			Handler:    _GRPC_GetLeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_server.proto",
}
