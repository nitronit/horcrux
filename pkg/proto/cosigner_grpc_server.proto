syntax = "proto3";

option go_package = "github.com/strangelove-ventures/horcrux/pkg/proto";

package proto;
// TODO: Should we split the service(?) into 2 one for "RAFT" and one for "Cosigner"
// CosignerGRPC handles all the cosigner level "services"
// All RPCs in ICosignerGRPCServer are Unary. This means the client sends a single request to the 
// server and gets a single response back, just like a normal function call.
service ICosignerGRPC {
		rpc SetNoncesAndSign (CosignerGRPCSetNoncesAndSignRequest) returns (CosignerGRPCSetNoncesAndSignResponse) {}
  	rpc GetNonces (CosignerGRPCGetNoncesRequest) returns (CosignerGRPCGetNoncesResponse) {}

}

// IRaftGRPC handles all the cosigner level "services"
// All RPCs in ICosignerGRPCServer are Unary. This means the client sends a single request to the
// server and gets a single response back, just like a normal function call
service IRaftGRPC{
		rpc SignBlock (RaftGRPCSignBlockRequest) returns (RaftGRPCSignBlockResponse) {}
		rpc TransferLeadership (RaftGRPCTransferLeadershipRequest) returns (RaftGRPCTransferLeadershipResponse) {}
		rpc GetLeader (RaftGRPCGetLeaderRequest) returns (RaftGRPCGetLeaderResponse) {}
}


message Block {
	int64 height = 1;
	int64 round = 2;
	int32 step = 3;
	bytes signBytes = 4;
	int64 timestamp = 5;
}

message RaftGRPCSignBlockRequest {
	string chainID = 1;
	Block block = 2;
}

message RaftGRPCSignBlockResponse {
	bytes signature = 1;
}

message Nonce {
	int32 sourceID = 1;
	int32 destinationID = 2;
	bytes pubKey = 3;
	bytes share = 4;
	bytes signature = 5;
}

message HRST {
	int64 height = 1;
	int64 round = 2;
  	int32 step = 3;
  	int64 timestamp = 4;
}

message CosignerGRPCSetNoncesAndSignRequest {
	repeated Nonce nonces = 1;
	HRST hrst = 2;
	bytes signBytes = 3;
  	string chainID = 4;
}

message CosignerGRPCSetNoncesAndSignResponse {
	bytes noncePublic = 1;
	int64 timestamp = 2;
	bytes signature = 3;
}

message CosignerGRPCGetNoncesRequest {
	HRST hrst = 1;
  	string chainID = 2;
}

message CosignerGRPCGetNoncesResponse {
	repeated Nonce nonces = 1;
}

message RaftGRPCTransferLeadershipRequest {
  	string leaderID = 1;
}

message RaftGRPCTransferLeadershipResponse {
  	string leaderID = 1;
  	string leaderAddress = 2;
}

message RaftGRPCGetLeaderRequest {}

message RaftGRPCGetLeaderResponse {
  	string leader = 1;
}
